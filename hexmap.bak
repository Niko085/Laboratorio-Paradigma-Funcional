#lang racket
;Función requerida por el TDA Image

(require "otras_funciones.rkt")

; Dominio: posicionx (int) X posiciony (int) X hex(String) X Profundidad (int)
; Recorrido: Int
; Descripcion: Crea un pixel de tipo hexmap
; Tipo de recursion: No se utiliza recursion
(define (pixhex-d posicionX posicionY color profundidad)
  (list posicionX posicionY color profundidad ))


;--------------------------------------------------Hexmap?----------------------------------------------------

;retorna 0 si no es hex, y retorna 1 en caso de si serlo
(define (hex? hex)
  (cond
    [(string? hex) 1]
    [else 0]))



;Revisa las posiciones 2, 3 y 4 de cada lista comprobando si es un pixel válido (Esas son las posiciones porque el contador parte de 0)
(define (revisar_SubListas_hex lista contador)
  (cond
    [(and (= 1 (hex? (acceder lista 2)))) 1]
    [else 0]))


;revisa la lista con sublistas ej: '((1 2 3 4) (5 6 7 8))
(define (revisarLista_hex lista contador revisado) ;El valor inicial de revisado debe ser mayor que 0, en este caso se usa 2
  (if (or (null? lista) (= revisado 0)) 
      revisado
      (revisarLista_hex (cdr lista) (+ contador 1) (revisar_SubListas_hex (car lista) 0))))


;comprueba si una imagen es de formato hexmap. Retorna #t si es hex, de lo contrario retorna #f
(define (hexmap? image)
  (cond
    [(not (= (contar (acceder (acceder image 2) 0)) 4)) #f]
    [(= (revisarLista_hex (acceder image 2) 0 2) 1) #t]
    [else #f]));Se accede a la posicion 2 del la lista image porque corresponde a la lista formada después del punto por el constructor image
;-------------------------------------------------------------------------------------------------------------------



















(provide (all-defined-out))