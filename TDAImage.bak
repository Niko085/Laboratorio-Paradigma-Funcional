#lang racket

;-----------------------------------TDA Image------------------------------------------------------------------------

;-----------------------------------REPRESENTACION--------------------------------------------------------------------

; Este TDA representa imagenes con bitmaps, hexmaps o pixmaps, además, incluye información de profundidad
; en cada pixel

;-----------------------------------CONSTRUCTORES---------------------------------------------------------------------

;bitmap -> pixbit-d

;pixmap -> pixrgb-d

;hexmap -> pixhex-d

(define tamanio (lambda (n)
                  (* n n)
  ))




;Contar elementos de una lista
(define (contarElem lista cont)
  (if (null? lista)
     cont
     (contarElem(cdr lista)(+ 1 cont))))




(define (contar lista)
  (cond
    [(null? lista) 0]
    [else (+ 1 (contar (cdr lista)))]))



(contar(list (pixrgb-d  0 0 10 10 10 10) 'suscribete 'like))


; Dominio: 
; Recorrido: 
; Descripcion: Crea una imagen de 2 x 2 del tipo pixmap
; Tipo de recursion: No se utiliza recursion
;(define Img1 (image 2 2
;                   (pixrgb-d 0 0 255 0 0 10) ;  FF0000 toma 255 0 0
;                   (pixrgb-d 0 1 0 255 0 20) ;  00FF00 toma 0 255 0
;                   (pixrgb-d 1 0 0 0 255 10) ;  0000FF toma 0 0 255
;                   (pixrgb-d 1 1 255 255 255 1) FFFFFF toma 255 255 255
;  ))

;(image 2 2 (pixrgb-d  0 0 10 10 10 10) (pixrgb-d  0 1 20 20 20 20) (pixrgb-d 1 0 30 30 30 30) (pixrgb-d 1 1 40 40 40 40))
;(image 2 2 (pixrgb-d  0 0 10 10 10 10) (pixrgb-d  0 1 20 20 20 20) (pixrgb-d 1 0 30 30 30 30) (pixrgb-d 1 1 40 40 40 40))
























; Dominio: 
; Recorrido: 
; Descripcion: Crea 
; Tipo de recursion: No se utiliza recursion
;(define (pixrgb )
 ; )

; Dominio: 
; Recorrido: 
; Descripcion: Crea 
; Tipo de recursion: No se utiliza recursion
;(define (pixhex )
;  )

;-----------------------------------OTRAS FUNCIONES-------------------------------------------------------------------




;Esta función se usa para usar el TDA en otros arcivos
(provide (all-defined-out))

